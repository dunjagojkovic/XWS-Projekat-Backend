version: "3.8"

services:
  post_service:
    image: post_service
    container_name: post_service
    build:
      context: .
      dockerfile: ./post_service/Dockerfile
    restart: on-failure
    environment:
      POST_DB_HOST: ${POST_DB_HOST}
      POST_DB_PORT: ${POST_DB_PORT}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      JAEGER_SERVICE_NAME: post_service
      JAEGER_AGENT_HOST: ${JAEGER_HOST}
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_MANAGER_HOST_PORT: ${JAEGER_HOST}:5778
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    depends_on:
      - post_db
    networks:
      - network

  job_service:
    image: job_service
    container_name: job_service
    build:
      context: .
      dockerfile: ./job_service/Dockerfile
    restart: on-failure
    environment:
      JOB_DB_HOST: ${JOB_DB_HOST}
      JOB_DB_PORT: ${JOB_DB_PORT}
      JOB_SERVICE_PORT: ${JOB_SERVICE_PORT}
    depends_on:
      - job_db
    networks:
      - network

  message_service:
    image: message_service
    container_name: message_service
    build:
      context: .
      dockerfile: ./message_service/Dockerfile
    restart: on-failure
    environment:
      MESSAGE_DB_HOST: ${MESSAGE_DB_HOST}
      MESSAGE_DB_PORT: ${MESSAGE_DB_PORT}
      MESSAGE_SERVICE_PORT: ${MESSAGE_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      CREATE_MESSAGE_COMMAND_SUBJECT: ${CREATE_MESSAGE_COMMAND_SUBJECT}
      CREATE_MESSAGE_REPLY_SUBJECT: ${CREATE_MESSAGE_REPLY_SUBJECT}
    depends_on:
      - message_db
    networks:
      - network
  
  user_service:
    image: user_service
    container_name: user_service
    build:
      context: .
      dockerfile: ./user_service/Dockerfile
    restart: on-failure
    environment:
      USER_DB_HOST: ${USER_DB_HOST}
      USER_DB_PORT: ${USER_DB_PORT}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      CREATE_MESSAGE_COMMAND_SUBJECT: ${CREATE_MESSAGE_COMMAND_SUBJECT}
      CREATE_MESSAGE_REPLY_SUBJECT: ${CREATE_MESSAGE_REPLY_SUBJECT}
    depends_on:
      - user_db
    networks:
      - network

  follow_service:
    image: follow_service
    container_name: follow_service
    build:
      context: .
      dockerfile: ./follow_service/Dockerfile
    restart: on-failure
    environment:
      FOLLOW_SERVICE_PORT:   ${FOLLOW_SERVICE_PORT}
      FOLLOW_DATABASE:       ${FOLLOW_DATABASE}
      FOLLOW_DB_HOST:        ${FOLLOW_DB_HOST}
      FOLLOW_DB_PORT:        ${FOLLOW_DB_PORT}
      FOLLOW_DB_USERNAME:    ${FOLLOW_DB_USERNAME}
      FOLLOW_DB_PASSWORD:    ${FOLLOW_DB_PASSWORD}
      DB_NEO4J_VERSION:      ${DB_NEO4J_VERSION}
      USER_SERVICE_HOST:     ${USER_SERVICE_HOST}
      USER_SERVICE_PORT:     ${USER_SERVICE_PORT}
      
    depends_on:
      - follow_db
    networks:
      - network

  recommendation_service:
    image: recommendation_service
    container_name: recommendation_service
    build:
      context: .
      dockerfile: ./recommendation_service/Dockerfile
    restart: on-failure
    environment:
      RECOMMENDATION_SERVICE_PORT:   ${RECOMMENDATION_SERVICE_PORT}
      RECOMMENDATION_DATABASE:       ${RECOMMENDATION_DATABASE}
      RECOMMENDATION_DB_HOST:        ${RECOMMENDATION_DB_HOST}
      RECOMMENDATION_DB_PORT:        ${RECOMMENDATION_DB_PORT}
      RECOMMENDATION_DB_USERNAME:    ${RECOMMENDATION_DB_USERNAME}
      RECOMMENDATION_DB_PASSWORD:    ${RECOMMENDATION_DB_PASSWORD}
      DB_NEO4J_VERSION:      ${DB_NEO4J_VERSION}
      
    depends_on:
      - recommendation_db
    networks:
      - network

  follow_db:
    image: neo4j
    container_name: follow_db
    restart: on-failure
    environment:
      NEO4J_AUTH: none
    ports:
      - 7474:7474
      - 7687:7687
    networks:
      - network


  recommendation_db:
    image: neo4j
    container_name: recommendation_db
    restart: on-failure
    environment:
      NEO4J_AUTH: none
    ports:
      - 11005:7474
      - 11003:7687
    networks:
      - network

  gateway:
    image: gateway
    container_name: gateway
    build:
      context: .
      dockerfile: ./gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      POST_SERVICE_HOST: ${POST_SERVICE_HOST}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      JOB_SERVICE_HOST: ${JOB_SERVICE_HOST}
      JOB_SERVICE_PORT: ${JOB_SERVICE_PORT}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      FOLLOW_SERVICE_HOST: ${FOLLOW_SERVICE_HOST}
      FOLLOW_SERVICE_PORT: ${FOLLOW_SERVICE_PORT}
      MESSAGE_SERVICE_HOST: ${MESSAGE_SERVICE_HOST}
      MESSAGE_SERVICE_PORT: ${MESSAGE_SERVICE_PORT}
      JAEGER_AGENT_HOST: ${JAEGER_HOST}
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_MANAGER_HOST_PORT: ${JAEGER_HOST}:5778
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
      RECOMMENDATION_SERVICE_HOST: ${RECOMMENDATION_SERVICE_HOST}
      RECOMMENDATION_SERVICE_PORT: ${RECOMMENDATION_SERVICE_PORT}
    networks:
      - network

  tracing:
    image: jaegertracing/all-in-one
    container_name: jaeger
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250" 
    

  app:
    image: 'docker-spring-boot-postgres:latest'
    build:
      context: .
      dockerfile: ./AgentService/src/main/docker/Dockerfile
    container_name: agent-app
    depends_on:
      - agent
    ports:
      - 8080:8080
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://agent:5432/agent
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update

  agent:
    image: 'postgres:13.1-alpine'
    container_name: agent
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=agent

  post_db:
    image: mongo
    container_name: post_db
    restart: on-failure
    ports:
      - 27017:27017
    networks:
      - network

  message_db:
    image: mongo
    container_name: message_db
    restart: on-failure
    #ports:
     # - 27018:27017
    networks:
      - network 

  job_db:
    image: mongo
    container_name: job_db
    restart: on-failure
    #ports:
     # - 27018:27017
    networks:
      - network

  user_db:
    image: mongo
    container_name: user_db
    restart: on-failure
    #ports:
     # - 27018:27017
    networks:
      - network

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://post_db:27017
    networks:
      - network
    volumes:
      - ./mongo_post_db:/data/db

  mongo-express_message:
    image: mongo-express
    restart: always
    ports:
      - 8084:8081
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://message_db:27017
    networks:
      - network
    volumes:
      - ./mongo_message_db:/data/db

  mongo-express_job:
    image: mongo-express
    restart: always
    ports:
      - 8082:8081
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://job_db:27017
    networks:
      - network
    volumes:
      - ./mongo_job_db:/data/db

  mongo-express_user:
    image: mongo-express
    restart: always
    ports:
      - 8083:8081
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://user_db:27017
    networks:
      - network
    volumes:
      - ./mongo_user_db:/data/db

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - network

networks:
  network:
    driver: bridge
  
volumes:
   mongo_post_db:
   mongo_job_db:
   mongo_user_db:
   mongo_message_db: